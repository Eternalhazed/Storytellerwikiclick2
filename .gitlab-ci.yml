stages: # List of stages for jobs, and their order of execution
  - check
  - publish
  - prerelease
  - release

always-yes:
  image: alpine:latest
  stage: check
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - echo "Done!"

check:
  image: node:22
  stage: check
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "docs/docs/**/*"
        - "docs/src/**/*"
        - "**/*.ts"
        - "**/*.js"
        - "**/*.json"
        - "**/*.tsx"
        - yarn.lock
  script:
    - apt update && apt install -y --no-install-recommends ffmpeg
    - yarn
    - yarn check
    - yarn build:docs
    - git fetch origin main --depth 1
    - ./scripts/check-versions.sh
    # At the moment, we only have tests for the web package,
    # so there's no need to run them if that hasn't changed.
    - if [ "$(git diff origin/main -- web)" ]; then yarn test; fi

check-version:
  stage: prerelease
  image: node:22
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - cd web
    - PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
    - ../scripts/if-version-change.sh git tag web-v${PACKAGE_VERSION}
    - cd ../docs
    - PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
    - ../scripts/if-version-change.sh git tag docs-v${PACKAGE_VERSION}
    - cd ../mobile
    - PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
    - ../scripts/if-version-change.sh git tag mobile-v${PACKAGE_VERSION}
    - cd ../fs
    - PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
    - ../scripts/if-version-change.sh git tag fs-v${PACKAGE_VERSION}
    - cd ../epub
    - PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
    - ../scripts/if-version-change.sh git tag epub-v${PACKAGE_VERSION}
    - cd ..
    - apt update && apt install -y --no-install-recommends git-lfs
    - git remote set-url origin
      https://ci-push-tag-token:${CI_PUSH_TAG_TOKEN}@gitlab.com/smoores/storyteller.git
    - git push --tags

pages:
  image: node:22-alpine
  stage: publish
  rules:
    - if: '$CI_COMMIT_TAG =~ /^docs-v?\d+\.\d+\.\d+$/'
  script:
    - yarn workspaces focus @storyteller/docs
    - yarn build:docs
  artifacts:
    paths:
      - public

publish-web:
  image: docker:24.0.5
  services:
    - name: docker:24.0.5
      alias: docker
  stage: publish
  rules:
    - if: '$CI_COMMIT_TAG =~ /^web-v?\d+\.\d+\.\d+/'
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker context create gitlab-ci
    - docker buildx create --use --driver=docker-container gitlab-ci
  script:
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx build --build-arg CI_COMMIT_TAG=$CI_COMMIT_TAG --platform
      linux/amd64,linux/arm64 --push -f Dockerfile --cache-from
      type=registry,ref=$CI_REGISTRY_IMAGE/cache:latest --cache-to
      type=registry,ref=$CI_REGISTRY_IMAGE/cache:latest,mode=max --tag
      $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .

prerelease-web:
  stage: prerelease
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^web-v?\d+\.\d+\.\d+/'
  script:
    - apk add curl jq
    - version=$(echo $CI_COMMIT_TAG | sed -r 's/web-//')
    - package=$(echo $CI_COMMIT_TAG | sed -r 's/-v\d+\.\d+\.\d+.*$//')
    - 'from_sha=$(curl -H "PRIVATE-TOKEN: $CI_API_TOKEN"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases" | jq -r "first(.[] |
      select(.tag_name | startswith(\"$package\")) | .commit.short_id)")'
    - to_sha=$CI_COMMIT_SHORT_SHA
    - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=${version}&from=${from_sha}&to=${to_sha}"
      | jq -r .notes > release_notes.md'
  artifacts:
    paths:
      - release_notes.md

release-web:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prerelease-web
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^web-v?\d+\.\d+\.\d+/'
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
  release:
    name: "Release $CI_COMMIT_TAG"
    description: release_notes.md
    tag_name: "$CI_COMMIT_TAG"
    ref: "$CI_COMMIT_SHA"
    assets:
      links:
        - name: "Image for $CI_COMMIT_TAG"
          url: "https://$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"

publish-fs:
  image: node:22
  stage: publish
  rules:
    - if: '$CI_COMMIT_TAG =~ /^fs-v?\d+\.\d+\.\d+/'
  script:
    - yarn check:types
    - yarn workspace @smoores/fs build
    - yarn config set npmAuthToken ${NPM_PUBLISH_TOKEN}
    - yarn workspace @smoores/fs publish

prerelease-fs:
  stage: prerelease
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^fs-v?\d+\.\d+\.\d+/'
  script:
    - apk add curl jq
    - version=$(echo $CI_COMMIT_TAG | sed -r 's/fs-//')
    - package=$(echo $CI_COMMIT_TAG | sed -r 's/-v\d+\.\d+\.\d+.*$//')
    - 'from_sha=$(curl -H "PRIVATE-TOKEN: $CI_API_TOKEN"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases" | jq -r "first(.[] |
      select(.tag_name | startswith(\"$package\")) | .commit.short_id)")'
    - to_sha=$CI_COMMIT_SHORT_SHA
    - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=${version}&from=${from_sha}&to=${to_sha}"
      | jq -r .notes > release_notes.md'
  artifacts:
    paths:
      - release_notes.md

release-fs:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prerelease-fs
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^fs-v?\d+\.\d+\.\d+/'
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
  release:
    name: "Release $CI_COMMIT_TAG"
    description: release_notes.md
    tag_name: "$CI_COMMIT_TAG"
    ref: "$CI_COMMIT_SHA"
    assets:
      links:
        - name: "Image for $CI_COMMIT_TAG"
          url: "https://$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"

publish-epub:
  image: node:22
  stage: publish
  rules:
    - if: '$CI_COMMIT_TAG =~ /^epub-v?\d+\.\d+\.\d+/'
  script:
    - yarn check:types
    - yarn workspace @smoores/epub build
    - yarn config set npmAuthToken ${NPM_PUBLISH_TOKEN}
    - yarn workspace @smoores/epub publish

prerelease-epub:
  stage: prerelease
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^epub-v?\d+\.\d+\.\d+/'
  script:
    - apk add curl jq
    - version=$(echo $CI_COMMIT_TAG | sed -r 's/epub-//')
    - package=$(echo $CI_COMMIT_TAG | sed -r 's/-v\d+\.\d+\.\d+.*$//')
    - 'from_sha=$(curl -H "PRIVATE-TOKEN: $CI_API_TOKEN"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases" | jq -r "first(.[] |
      select(.tag_name | startswith(\"$package\")) | .commit.short_id)")'
    - to_sha=$CI_COMMIT_SHORT_SHA
    - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=${version}&from=${from_sha}&to=${to_sha}"
      | jq -r .notes > release_notes.md'
  artifacts:
    paths:
      - release_notes.md

release-epub:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prerelease-epub
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^epub-v?\d+\.\d+\.\d+/'
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
  release:
    name: "Release $CI_COMMIT_TAG"
    description: release_notes.md
    tag_name: "$CI_COMMIT_TAG"
    ref: "$CI_COMMIT_SHA"
    assets:
      links:
        - name: "Image for $CI_COMMIT_TAG"
          url: "https://$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"

prerelease-mobile:
  stage: prerelease
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^mobile-v?\d+\.\d+\.\d+$/'
  script:
    - apk add curl jq
    - version=$(echo $CI_COMMIT_TAG | sed -r 's/mobile-//')
    - package=$(echo $CI_COMMIT_TAG | sed -r 's/-v\d+\.\d+\.\d+$//')
    - 'from_sha=$(curl -H "PRIVATE-TOKEN: $CI_API_TOKEN"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases" | jq -r "first(.[] |
      select(.tag_name | startswith(\"$package\")) | .commit.short_id)")'
    - to_sha=$CI_COMMIT_SHORT_SHA
    - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=${version}&from=${from_sha}&to=${to_sha}"
      | jq -r .notes > release_notes.md'
  artifacts:
    paths:
      - release_notes.md

release-mobile:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prerelease-mobile
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^mobile-v?\d+\.\d+\.\d+$/'
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
  release:
    name: "Release $CI_COMMIT_TAG"
    description: release_notes.md
    tag_name: "$CI_COMMIT_TAG"
    ref: "$CI_COMMIT_SHA"
    assets:
      links:
        - name: "iOS"
          url: "https://apps.apple.com/us/app/storyteller-reader/id6474467720"
        - name: "Android"
          url: "https://play.google.com/store/apps/details?id=dev.smoores.Storyteller"
